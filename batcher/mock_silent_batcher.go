// Code generated by mockery v2.15.0. DO NOT EDIT.

package batcher

import (
	context "context"

	async "github.com/jamestrandung/go-concurrency/v2/async"

	mock "github.com/stretchr/testify/mock"
)

// MockSilentBatcher is an autogenerated mock type for the SilentBatcher type
type MockSilentBatcher[P interface{}] struct {
	mock.Mock
}

// Append provides a mock function with given fields: ctx, payload
func (_m *MockSilentBatcher[P]) Append(ctx context.Context, payload P) async.SilentTask {
	ret := _m.Called(ctx, payload)

	var r0 async.SilentTask
	if rf, ok := ret.Get(0).(func(context.Context, P) async.SilentTask); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(async.SilentTask)
		}
	}

	return r0
}

// BuyTicket provides a mock function with given fields: ctx
func (_m *MockSilentBatcher[P]) BuyTicket(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// DiscardTicket provides a mock function with given fields: ctx
func (_m *MockSilentBatcher[P]) DiscardTicket(ctx context.Context) {
	_m.Called(ctx)
}

// Process provides a mock function with given fields: ctx
func (_m *MockSilentBatcher[P]) Process(ctx context.Context) {
	_m.Called(ctx)
}

// Shutdown provides a mock function with given fields:
func (_m *MockSilentBatcher[P]) Shutdown() {
	_m.Called()
}

// Size provides a mock function with given fields:
func (_m *MockSilentBatcher[P]) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewMockSilentBatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSilentBatcher creates a new instance of MockSilentBatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSilentBatcher[P interface{}](t mockConstructorTestingTNewMockSilentBatcher) *MockSilentBatcher[P] {
	mock := &MockSilentBatcher[P]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
