// Code generated by mockery v2.15.0. DO NOT EDIT.

package async

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockSilentTask is an autogenerated mock type for the SilentTask type
type MockSilentTask struct {
	mock.Mock
}

// Cancel provides a mock function with given fields:
func (_m *MockSilentTask) Cancel() {
	_m.Called()
}

// Duration provides a mock function with given fields:
func (_m *MockSilentTask) Duration() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Error provides a mock function with given fields:
func (_m *MockSilentTask) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Execute provides a mock function with given fields: ctx
func (_m *MockSilentTask) Execute(ctx context.Context) SilentTask {
	ret := _m.Called(ctx)

	var r0 SilentTask
	if rf, ok := ret.Get(0).(func(context.Context) SilentTask); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SilentTask)
		}
	}

	return r0
}

// ExecuteSync provides a mock function with given fields: ctx
func (_m *MockSilentTask) ExecuteSync(ctx context.Context) SilentTask {
	ret := _m.Called(ctx)

	var r0 SilentTask
	if rf, ok := ret.Get(0).(func(context.Context) SilentTask); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SilentTask)
		}
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *MockSilentTask) State() State {
	ret := _m.Called()

	var r0 State
	if rf, ok := ret.Get(0).(func() State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(State)
	}

	return r0
}

// Wait provides a mock function with given fields:
func (_m *MockSilentTask) Wait() {
	_m.Called()
}

// WithRecoverAction provides a mock function with given fields: recoverAction
func (_m *MockSilentTask) WithRecoverAction(recoverAction PanicRecoverWork) {
	_m.Called(recoverAction)
}

type mockConstructorTestingTNewMockSilentTask interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSilentTask creates a new instance of MockSilentTask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSilentTask(t mockConstructorTestingTNewMockSilentTask) *MockSilentTask {
	mock := &MockSilentTask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
